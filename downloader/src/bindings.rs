/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe { *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize) };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe { (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize) };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const SOCK_SNDBUF_LOCK: u32 = 1;
pub const SOCK_RCVBUF_LOCK: u32 = 2;
pub const SOCK_BUF_LOCK_MASK: u32 = 3;
pub const SOCK_TXREHASH_DEFAULT: u32 = 255;
pub const SOCK_TXREHASH_DISABLED: u32 = 0;
pub const SOCK_TXREHASH_ENABLED: u32 = 1;
pub const TCP_MSS_DEFAULT: u32 = 536;
pub const TCP_MSS_DESIRED: u32 = 1220;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_CORK: u32 = 3;
pub const TCP_KEEPIDLE: u32 = 4;
pub const TCP_KEEPINTVL: u32 = 5;
pub const TCP_KEEPCNT: u32 = 6;
pub const TCP_SYNCNT: u32 = 7;
pub const TCP_LINGER2: u32 = 8;
pub const TCP_DEFER_ACCEPT: u32 = 9;
pub const TCP_WINDOW_CLAMP: u32 = 10;
pub const TCP_INFO: u32 = 11;
pub const TCP_QUICKACK: u32 = 12;
pub const TCP_CONGESTION: u32 = 13;
pub const TCP_MD5SIG: u32 = 14;
pub const TCP_THIN_LINEAR_TIMEOUTS: u32 = 16;
pub const TCP_THIN_DUPACK: u32 = 17;
pub const TCP_USER_TIMEOUT: u32 = 18;
pub const TCP_REPAIR: u32 = 19;
pub const TCP_REPAIR_QUEUE: u32 = 20;
pub const TCP_QUEUE_SEQ: u32 = 21;
pub const TCP_REPAIR_OPTIONS: u32 = 22;
pub const TCP_FASTOPEN: u32 = 23;
pub const TCP_TIMESTAMP: u32 = 24;
pub const TCP_NOTSENT_LOWAT: u32 = 25;
pub const TCP_CC_INFO: u32 = 26;
pub const TCP_SAVE_SYN: u32 = 27;
pub const TCP_SAVED_SYN: u32 = 28;
pub const TCP_REPAIR_WINDOW: u32 = 29;
pub const TCP_FASTOPEN_CONNECT: u32 = 30;
pub const TCP_ULP: u32 = 31;
pub const TCP_MD5SIG_EXT: u32 = 32;
pub const TCP_FASTOPEN_KEY: u32 = 33;
pub const TCP_FASTOPEN_NO_COOKIE: u32 = 34;
pub const TCP_ZEROCOPY_RECEIVE: u32 = 35;
pub const TCP_INQ: u32 = 36;
pub const TCP_CM_INQ: u32 = 36;
pub const TCP_TX_DELAY: u32 = 37;
pub const TCP_AO_ADD_KEY: u32 = 38;
pub const TCP_AO_DEL_KEY: u32 = 39;
pub const TCP_AO_INFO: u32 = 40;
pub const TCP_AO_GET_KEYS: u32 = 41;
pub const TCP_AO_REPAIR: u32 = 42;
pub const TCP_IS_MPTCP: u32 = 43;
pub const TCP_RTO_MAX_MS: u32 = 44;
pub const TCP_RTO_MIN_US: u32 = 45;
pub const TCP_DELACK_MAX_US: u32 = 46;
pub const TCP_REPAIR_ON: u32 = 1;
pub const TCP_REPAIR_OFF: u32 = 0;
pub const TCP_REPAIR_OFF_NO_WP: i32 = -1;
pub const TCPI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPI_OPT_SACK: u32 = 2;
pub const TCPI_OPT_WSCALE: u32 = 4;
pub const TCPI_OPT_ECN: u32 = 8;
pub const TCPI_OPT_ECN_SEEN: u32 = 16;
pub const TCPI_OPT_SYN_DATA: u32 = 32;
pub const TCPI_OPT_USEC_TS: u32 = 64;
pub const TCP_MD5SIG_MAXKEYLEN: u32 = 80;
pub const TCP_MD5SIG_FLAG_PREFIX: u32 = 1;
pub const TCP_MD5SIG_FLAG_IFINDEX: u32 = 2;
pub const TCP_AO_MAXKEYLEN: u32 = 80;
pub const TCP_AO_KEYF_IFINDEX: u32 = 1;
pub const TCP_AO_KEYF_EXCLUDE_OPT: u32 = 2;
pub const TCP_RECEIVE_ZEROCOPY_FLAG_TLB_CLEAN_HINT: u32 = 1;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"][::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"][::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type __kernel_sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __kernel_sockaddr_storage__bindgen_ty_1 {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
    pub __align: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [::std::os::raw::c_char; 126usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1::ss_family"]
        [::std::mem::offset_of!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1, ss_family) - 0usize];
    ["Offset of field: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1::__data"]
        [::std::mem::offset_of!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1, __data) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_sockaddr_storage__bindgen_ty_1"]
        [::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1>() - 128usize];
    ["Alignment of __kernel_sockaddr_storage__bindgen_ty_1"]
        [::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1>() - 8usize];
    ["Offset of field: __kernel_sockaddr_storage__bindgen_ty_1::__align"]
        [::std::mem::offset_of!(__kernel_sockaddr_storage__bindgen_ty_1, __align) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_sockaddr_storage"][::std::mem::size_of::<__kernel_sockaddr_storage>() - 128usize];
    ["Alignment of __kernel_sockaddr_storage"][::std::mem::align_of::<__kernel_sockaddr_storage>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr {
    pub source: __be16,
    pub dest: __be16,
    pub seq: __be32,
    pub ack_seq: __be32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub window: __be16,
    pub check: __sum16,
    pub urg_ptr: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcphdr"][::std::mem::size_of::<tcphdr>() - 20usize];
    ["Alignment of tcphdr"][::std::mem::align_of::<tcphdr>() - 4usize];
    ["Offset of field: tcphdr::source"][::std::mem::offset_of!(tcphdr, source) - 0usize];
    ["Offset of field: tcphdr::dest"][::std::mem::offset_of!(tcphdr, dest) - 2usize];
    ["Offset of field: tcphdr::seq"][::std::mem::offset_of!(tcphdr, seq) - 4usize];
    ["Offset of field: tcphdr::ack_seq"][::std::mem::offset_of!(tcphdr, ack_seq) - 8usize];
    ["Offset of field: tcphdr::window"][::std::mem::offset_of!(tcphdr, window) - 14usize];
    ["Offset of field: tcphdr::check"][::std::mem::offset_of!(tcphdr, check) - 16usize];
    ["Offset of field: tcphdr::urg_ptr"][::std::mem::offset_of!(tcphdr, urg_ptr) - 18usize];
};
impl tcphdr {
    #[inline]
    pub fn ae(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ae(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ae_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_ae_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn res1(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_res1(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn res1_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_res1_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn doff(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_doff(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn doff_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_doff_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fin(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_fin(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fin_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_fin_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn syn(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_syn(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn syn_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_syn_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rst(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_rst(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rst_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_rst_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn psh(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_psh(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn psh_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_psh_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ack(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ack(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ack_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_ack_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn urg(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_urg(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn urg_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_urg_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ece(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ece(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ece_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_ece_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cwr(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_cwr(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cwr_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_cwr_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ae: __u16,
        res1: __u16,
        doff: __u16,
        fin: __u16,
        syn: __u16,
        rst: __u16,
        psh: __u16,
        ack: __u16,
        urg: __u16,
        ece: __u16,
        cwr: __u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ae: u16 = unsafe { ::std::mem::transmute(ae) };
            ae as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let res1: u16 = unsafe { ::std::mem::transmute(res1) };
            res1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let doff: u16 = unsafe { ::std::mem::transmute(doff) };
            doff as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fin: u16 = unsafe { ::std::mem::transmute(fin) };
            fin as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let syn: u16 = unsafe { ::std::mem::transmute(syn) };
            syn as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rst: u16 = unsafe { ::std::mem::transmute(rst) };
            rst as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let psh: u16 = unsafe { ::std::mem::transmute(psh) };
            psh as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ack: u16 = unsafe { ::std::mem::transmute(ack) };
            ack as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let urg: u16 = unsafe { ::std::mem::transmute(urg) };
            urg as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let ece: u16 = unsafe { ::std::mem::transmute(ece) };
            ece as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let cwr: u16 = unsafe { ::std::mem::transmute(cwr) };
            cwr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tcp_word_hdr {
    pub hdr: tcphdr,
    pub words: [__be32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_word_hdr"][::std::mem::size_of::<tcp_word_hdr>() - 20usize];
    ["Alignment of tcp_word_hdr"][::std::mem::align_of::<tcp_word_hdr>() - 4usize];
    ["Offset of field: tcp_word_hdr::hdr"][::std::mem::offset_of!(tcp_word_hdr, hdr) - 0usize];
    ["Offset of field: tcp_word_hdr::words"][::std::mem::offset_of!(tcp_word_hdr, words) - 0usize];
};
pub const TCP_FLAG_AE: _bindgen_ty_1 = 1;
pub const TCP_FLAG_CWR: _bindgen_ty_1 = 32768;
pub const TCP_FLAG_ECE: _bindgen_ty_1 = 16384;
pub const TCP_FLAG_URG: _bindgen_ty_1 = 8192;
pub const TCP_FLAG_ACK: _bindgen_ty_1 = 4096;
pub const TCP_FLAG_PSH: _bindgen_ty_1 = 2048;
pub const TCP_FLAG_RST: _bindgen_ty_1 = 1024;
pub const TCP_FLAG_SYN: _bindgen_ty_1 = 512;
pub const TCP_FLAG_FIN: _bindgen_ty_1 = 256;
pub const TCP_RESERVED_BITS: _bindgen_ty_1 = 14;
pub const TCP_DATA_OFFSET: _bindgen_ty_1 = 240;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_repair_opt {
    pub opt_code: __u32,
    pub opt_val: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_repair_opt"][::std::mem::size_of::<tcp_repair_opt>() - 8usize];
    ["Alignment of tcp_repair_opt"][::std::mem::align_of::<tcp_repair_opt>() - 4usize];
    ["Offset of field: tcp_repair_opt::opt_code"][::std::mem::offset_of!(tcp_repair_opt, opt_code) - 0usize];
    ["Offset of field: tcp_repair_opt::opt_val"][::std::mem::offset_of!(tcp_repair_opt, opt_val) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_repair_window {
    pub snd_wl1: __u32,
    pub snd_wnd: __u32,
    pub max_window: __u32,
    pub rcv_wnd: __u32,
    pub rcv_wup: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_repair_window"][::std::mem::size_of::<tcp_repair_window>() - 20usize];
    ["Alignment of tcp_repair_window"][::std::mem::align_of::<tcp_repair_window>() - 4usize];
    ["Offset of field: tcp_repair_window::snd_wl1"][::std::mem::offset_of!(tcp_repair_window, snd_wl1) - 0usize];
    ["Offset of field: tcp_repair_window::snd_wnd"][::std::mem::offset_of!(tcp_repair_window, snd_wnd) - 4usize];
    ["Offset of field: tcp_repair_window::max_window"][::std::mem::offset_of!(tcp_repair_window, max_window) - 8usize];
    ["Offset of field: tcp_repair_window::rcv_wnd"][::std::mem::offset_of!(tcp_repair_window, rcv_wnd) - 12usize];
    ["Offset of field: tcp_repair_window::rcv_wup"][::std::mem::offset_of!(tcp_repair_window, rcv_wup) - 16usize];
};
pub const TCP_NO_QUEUE: _bindgen_ty_2 = 0;
pub const TCP_RECV_QUEUE: _bindgen_ty_2 = 1;
pub const TCP_SEND_QUEUE: _bindgen_ty_2 = 2;
pub const TCP_QUEUES_NR: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const tcp_fastopen_client_fail_TFO_STATUS_UNSPEC: tcp_fastopen_client_fail = 0;
pub const tcp_fastopen_client_fail_TFO_COOKIE_UNAVAILABLE: tcp_fastopen_client_fail = 1;
pub const tcp_fastopen_client_fail_TFO_DATA_NOT_ACKED: tcp_fastopen_client_fail = 2;
pub const tcp_fastopen_client_fail_TFO_SYN_RETRANSMITTED: tcp_fastopen_client_fail = 3;
pub type tcp_fastopen_client_fail = ::std::os::raw::c_uint;
pub const tcp_ca_state_TCP_CA_Open: tcp_ca_state = 0;
pub const tcp_ca_state_TCP_CA_Disorder: tcp_ca_state = 1;
pub const tcp_ca_state_TCP_CA_CWR: tcp_ca_state = 2;
pub const tcp_ca_state_TCP_CA_Recovery: tcp_ca_state = 3;
pub const tcp_ca_state_TCP_CA_Loss: tcp_ca_state = 4;
pub type tcp_ca_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_info {
    pub tcpi_state: __u8,
    pub tcpi_ca_state: __u8,
    pub tcpi_retransmits: __u8,
    pub tcpi_probes: __u8,
    pub tcpi_backoff: __u8,
    pub tcpi_options: __u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub tcpi_rto: __u32,
    pub tcpi_ato: __u32,
    pub tcpi_snd_mss: __u32,
    pub tcpi_rcv_mss: __u32,
    pub tcpi_unacked: __u32,
    pub tcpi_sacked: __u32,
    pub tcpi_lost: __u32,
    pub tcpi_retrans: __u32,
    pub tcpi_fackets: __u32,
    pub tcpi_last_data_sent: __u32,
    pub tcpi_last_ack_sent: __u32,
    pub tcpi_last_data_recv: __u32,
    pub tcpi_last_ack_recv: __u32,
    pub tcpi_pmtu: __u32,
    pub tcpi_rcv_ssthresh: __u32,
    pub tcpi_rtt: __u32,
    pub tcpi_rttvar: __u32,
    pub tcpi_snd_ssthresh: __u32,
    pub tcpi_snd_cwnd: __u32,
    pub tcpi_advmss: __u32,
    pub tcpi_reordering: __u32,
    pub tcpi_rcv_rtt: __u32,
    pub tcpi_rcv_space: __u32,
    pub tcpi_total_retrans: __u32,
    pub tcpi_pacing_rate: __u64,
    pub tcpi_max_pacing_rate: __u64,
    pub tcpi_bytes_acked: __u64,
    pub tcpi_bytes_received: __u64,
    pub tcpi_segs_out: __u32,
    pub tcpi_segs_in: __u32,
    pub tcpi_notsent_bytes: __u32,
    pub tcpi_min_rtt: __u32,
    pub tcpi_data_segs_in: __u32,
    pub tcpi_data_segs_out: __u32,
    pub tcpi_delivery_rate: __u64,
    pub tcpi_busy_time: __u64,
    pub tcpi_rwnd_limited: __u64,
    pub tcpi_sndbuf_limited: __u64,
    pub tcpi_delivered: __u32,
    pub tcpi_delivered_ce: __u32,
    pub tcpi_bytes_sent: __u64,
    pub tcpi_bytes_retrans: __u64,
    pub tcpi_dsack_dups: __u32,
    pub tcpi_reord_seen: __u32,
    pub tcpi_rcv_ooopack: __u32,
    pub tcpi_snd_wnd: __u32,
    pub tcpi_rcv_wnd: __u32,
    pub tcpi_rehash: __u32,
    pub tcpi_total_rto: __u16,
    pub tcpi_total_rto_recoveries: __u16,
    pub tcpi_total_rto_time: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_info"][::std::mem::size_of::<tcp_info>() - 248usize];
    ["Alignment of tcp_info"][::std::mem::align_of::<tcp_info>() - 8usize];
    ["Offset of field: tcp_info::tcpi_state"][::std::mem::offset_of!(tcp_info, tcpi_state) - 0usize];
    ["Offset of field: tcp_info::tcpi_ca_state"][::std::mem::offset_of!(tcp_info, tcpi_ca_state) - 1usize];
    ["Offset of field: tcp_info::tcpi_retransmits"][::std::mem::offset_of!(tcp_info, tcpi_retransmits) - 2usize];
    ["Offset of field: tcp_info::tcpi_probes"][::std::mem::offset_of!(tcp_info, tcpi_probes) - 3usize];
    ["Offset of field: tcp_info::tcpi_backoff"][::std::mem::offset_of!(tcp_info, tcpi_backoff) - 4usize];
    ["Offset of field: tcp_info::tcpi_options"][::std::mem::offset_of!(tcp_info, tcpi_options) - 5usize];
    ["Offset of field: tcp_info::tcpi_rto"][::std::mem::offset_of!(tcp_info, tcpi_rto) - 8usize];
    ["Offset of field: tcp_info::tcpi_ato"][::std::mem::offset_of!(tcp_info, tcpi_ato) - 12usize];
    ["Offset of field: tcp_info::tcpi_snd_mss"][::std::mem::offset_of!(tcp_info, tcpi_snd_mss) - 16usize];
    ["Offset of field: tcp_info::tcpi_rcv_mss"][::std::mem::offset_of!(tcp_info, tcpi_rcv_mss) - 20usize];
    ["Offset of field: tcp_info::tcpi_unacked"][::std::mem::offset_of!(tcp_info, tcpi_unacked) - 24usize];
    ["Offset of field: tcp_info::tcpi_sacked"][::std::mem::offset_of!(tcp_info, tcpi_sacked) - 28usize];
    ["Offset of field: tcp_info::tcpi_lost"][::std::mem::offset_of!(tcp_info, tcpi_lost) - 32usize];
    ["Offset of field: tcp_info::tcpi_retrans"][::std::mem::offset_of!(tcp_info, tcpi_retrans) - 36usize];
    ["Offset of field: tcp_info::tcpi_fackets"][::std::mem::offset_of!(tcp_info, tcpi_fackets) - 40usize];
    ["Offset of field: tcp_info::tcpi_last_data_sent"][::std::mem::offset_of!(tcp_info, tcpi_last_data_sent) - 44usize];
    ["Offset of field: tcp_info::tcpi_last_ack_sent"][::std::mem::offset_of!(tcp_info, tcpi_last_ack_sent) - 48usize];
    ["Offset of field: tcp_info::tcpi_last_data_recv"][::std::mem::offset_of!(tcp_info, tcpi_last_data_recv) - 52usize];
    ["Offset of field: tcp_info::tcpi_last_ack_recv"][::std::mem::offset_of!(tcp_info, tcpi_last_ack_recv) - 56usize];
    ["Offset of field: tcp_info::tcpi_pmtu"][::std::mem::offset_of!(tcp_info, tcpi_pmtu) - 60usize];
    ["Offset of field: tcp_info::tcpi_rcv_ssthresh"][::std::mem::offset_of!(tcp_info, tcpi_rcv_ssthresh) - 64usize];
    ["Offset of field: tcp_info::tcpi_rtt"][::std::mem::offset_of!(tcp_info, tcpi_rtt) - 68usize];
    ["Offset of field: tcp_info::tcpi_rttvar"][::std::mem::offset_of!(tcp_info, tcpi_rttvar) - 72usize];
    ["Offset of field: tcp_info::tcpi_snd_ssthresh"][::std::mem::offset_of!(tcp_info, tcpi_snd_ssthresh) - 76usize];
    ["Offset of field: tcp_info::tcpi_snd_cwnd"][::std::mem::offset_of!(tcp_info, tcpi_snd_cwnd) - 80usize];
    ["Offset of field: tcp_info::tcpi_advmss"][::std::mem::offset_of!(tcp_info, tcpi_advmss) - 84usize];
    ["Offset of field: tcp_info::tcpi_reordering"][::std::mem::offset_of!(tcp_info, tcpi_reordering) - 88usize];
    ["Offset of field: tcp_info::tcpi_rcv_rtt"][::std::mem::offset_of!(tcp_info, tcpi_rcv_rtt) - 92usize];
    ["Offset of field: tcp_info::tcpi_rcv_space"][::std::mem::offset_of!(tcp_info, tcpi_rcv_space) - 96usize];
    ["Offset of field: tcp_info::tcpi_total_retrans"][::std::mem::offset_of!(tcp_info, tcpi_total_retrans) - 100usize];
    ["Offset of field: tcp_info::tcpi_pacing_rate"][::std::mem::offset_of!(tcp_info, tcpi_pacing_rate) - 104usize];
    ["Offset of field: tcp_info::tcpi_max_pacing_rate"]
        [::std::mem::offset_of!(tcp_info, tcpi_max_pacing_rate) - 112usize];
    ["Offset of field: tcp_info::tcpi_bytes_acked"][::std::mem::offset_of!(tcp_info, tcpi_bytes_acked) - 120usize];
    ["Offset of field: tcp_info::tcpi_bytes_received"]
        [::std::mem::offset_of!(tcp_info, tcpi_bytes_received) - 128usize];
    ["Offset of field: tcp_info::tcpi_segs_out"][::std::mem::offset_of!(tcp_info, tcpi_segs_out) - 136usize];
    ["Offset of field: tcp_info::tcpi_segs_in"][::std::mem::offset_of!(tcp_info, tcpi_segs_in) - 140usize];
    ["Offset of field: tcp_info::tcpi_notsent_bytes"][::std::mem::offset_of!(tcp_info, tcpi_notsent_bytes) - 144usize];
    ["Offset of field: tcp_info::tcpi_min_rtt"][::std::mem::offset_of!(tcp_info, tcpi_min_rtt) - 148usize];
    ["Offset of field: tcp_info::tcpi_data_segs_in"][::std::mem::offset_of!(tcp_info, tcpi_data_segs_in) - 152usize];
    ["Offset of field: tcp_info::tcpi_data_segs_out"][::std::mem::offset_of!(tcp_info, tcpi_data_segs_out) - 156usize];
    ["Offset of field: tcp_info::tcpi_delivery_rate"][::std::mem::offset_of!(tcp_info, tcpi_delivery_rate) - 160usize];
    ["Offset of field: tcp_info::tcpi_busy_time"][::std::mem::offset_of!(tcp_info, tcpi_busy_time) - 168usize];
    ["Offset of field: tcp_info::tcpi_rwnd_limited"][::std::mem::offset_of!(tcp_info, tcpi_rwnd_limited) - 176usize];
    ["Offset of field: tcp_info::tcpi_sndbuf_limited"]
        [::std::mem::offset_of!(tcp_info, tcpi_sndbuf_limited) - 184usize];
    ["Offset of field: tcp_info::tcpi_delivered"][::std::mem::offset_of!(tcp_info, tcpi_delivered) - 192usize];
    ["Offset of field: tcp_info::tcpi_delivered_ce"][::std::mem::offset_of!(tcp_info, tcpi_delivered_ce) - 196usize];
    ["Offset of field: tcp_info::tcpi_bytes_sent"][::std::mem::offset_of!(tcp_info, tcpi_bytes_sent) - 200usize];
    ["Offset of field: tcp_info::tcpi_bytes_retrans"][::std::mem::offset_of!(tcp_info, tcpi_bytes_retrans) - 208usize];
    ["Offset of field: tcp_info::tcpi_dsack_dups"][::std::mem::offset_of!(tcp_info, tcpi_dsack_dups) - 216usize];
    ["Offset of field: tcp_info::tcpi_reord_seen"][::std::mem::offset_of!(tcp_info, tcpi_reord_seen) - 220usize];
    ["Offset of field: tcp_info::tcpi_rcv_ooopack"][::std::mem::offset_of!(tcp_info, tcpi_rcv_ooopack) - 224usize];
    ["Offset of field: tcp_info::tcpi_snd_wnd"][::std::mem::offset_of!(tcp_info, tcpi_snd_wnd) - 228usize];
    ["Offset of field: tcp_info::tcpi_rcv_wnd"][::std::mem::offset_of!(tcp_info, tcpi_rcv_wnd) - 232usize];
    ["Offset of field: tcp_info::tcpi_rehash"][::std::mem::offset_of!(tcp_info, tcpi_rehash) - 236usize];
    ["Offset of field: tcp_info::tcpi_total_rto"][::std::mem::offset_of!(tcp_info, tcpi_total_rto) - 240usize];
    ["Offset of field: tcp_info::tcpi_total_rto_recoveries"]
        [::std::mem::offset_of!(tcp_info, tcpi_total_rto_recoveries) - 242usize];
    ["Offset of field: tcp_info::tcpi_total_rto_time"]
        [::std::mem::offset_of!(tcp_info, tcpi_total_rto_time) - 244usize];
};
impl tcp_info {
    #[inline]
    pub fn tcpi_snd_wscale(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_tcpi_snd_wscale(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_snd_wscale_raw(this: *const Self) -> __u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_snd_wscale_raw(this: *mut Self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_rcv_wscale(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_tcpi_rcv_wscale(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_rcv_wscale_raw(this: *const Self) -> __u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_rcv_wscale_raw(this: *mut Self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_delivery_rate_app_limited(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tcpi_delivery_rate_app_limited(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_delivery_rate_app_limited_raw(this: *const Self) -> __u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_delivery_rate_app_limited_raw(this: *mut Self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_fastopen_client_fail(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_tcpi_fastopen_client_fail(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_fastopen_client_fail_raw(this: *const Self) -> __u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_fastopen_client_fail_raw(this: *mut Self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_snd_wscale: __u8,
        tcpi_rcv_wscale: __u8,
        tcpi_delivery_rate_app_limited: __u8,
        tcpi_fastopen_client_fail: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let tcpi_snd_wscale: u8 = unsafe { ::std::mem::transmute(tcpi_snd_wscale) };
            tcpi_snd_wscale as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let tcpi_rcv_wscale: u8 = unsafe { ::std::mem::transmute(tcpi_rcv_wscale) };
            tcpi_rcv_wscale as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tcpi_delivery_rate_app_limited: u8 = unsafe { ::std::mem::transmute(tcpi_delivery_rate_app_limited) };
            tcpi_delivery_rate_app_limited as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let tcpi_fastopen_client_fail: u8 = unsafe { ::std::mem::transmute(tcpi_fastopen_client_fail) };
            tcpi_fastopen_client_fail as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const TCP_NLA_PAD: _bindgen_ty_3 = 0;
pub const TCP_NLA_BUSY: _bindgen_ty_3 = 1;
pub const TCP_NLA_RWND_LIMITED: _bindgen_ty_3 = 2;
pub const TCP_NLA_SNDBUF_LIMITED: _bindgen_ty_3 = 3;
pub const TCP_NLA_DATA_SEGS_OUT: _bindgen_ty_3 = 4;
pub const TCP_NLA_TOTAL_RETRANS: _bindgen_ty_3 = 5;
pub const TCP_NLA_PACING_RATE: _bindgen_ty_3 = 6;
pub const TCP_NLA_DELIVERY_RATE: _bindgen_ty_3 = 7;
pub const TCP_NLA_SND_CWND: _bindgen_ty_3 = 8;
pub const TCP_NLA_REORDERING: _bindgen_ty_3 = 9;
pub const TCP_NLA_MIN_RTT: _bindgen_ty_3 = 10;
pub const TCP_NLA_RECUR_RETRANS: _bindgen_ty_3 = 11;
pub const TCP_NLA_DELIVERY_RATE_APP_LMT: _bindgen_ty_3 = 12;
pub const TCP_NLA_SNDQ_SIZE: _bindgen_ty_3 = 13;
pub const TCP_NLA_CA_STATE: _bindgen_ty_3 = 14;
pub const TCP_NLA_SND_SSTHRESH: _bindgen_ty_3 = 15;
pub const TCP_NLA_DELIVERED: _bindgen_ty_3 = 16;
pub const TCP_NLA_DELIVERED_CE: _bindgen_ty_3 = 17;
pub const TCP_NLA_BYTES_SENT: _bindgen_ty_3 = 18;
pub const TCP_NLA_BYTES_RETRANS: _bindgen_ty_3 = 19;
pub const TCP_NLA_DSACK_DUPS: _bindgen_ty_3 = 20;
pub const TCP_NLA_REORD_SEEN: _bindgen_ty_3 = 21;
pub const TCP_NLA_SRTT: _bindgen_ty_3 = 22;
pub const TCP_NLA_TIMEOUT_REHASH: _bindgen_ty_3 = 23;
pub const TCP_NLA_BYTES_NOTSENT: _bindgen_ty_3 = 24;
pub const TCP_NLA_EDT: _bindgen_ty_3 = 25;
pub const TCP_NLA_TTL: _bindgen_ty_3 = 26;
pub const TCP_NLA_REHASH: _bindgen_ty_3 = 27;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_md5sig {
    pub tcpm_addr: __kernel_sockaddr_storage,
    pub tcpm_flags: __u8,
    pub tcpm_prefixlen: __u8,
    pub tcpm_keylen: __u16,
    pub tcpm_ifindex: ::std::os::raw::c_int,
    pub tcpm_key: [__u8; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_md5sig"][::std::mem::size_of::<tcp_md5sig>() - 216usize];
    ["Alignment of tcp_md5sig"][::std::mem::align_of::<tcp_md5sig>() - 8usize];
    ["Offset of field: tcp_md5sig::tcpm_addr"][::std::mem::offset_of!(tcp_md5sig, tcpm_addr) - 0usize];
    ["Offset of field: tcp_md5sig::tcpm_flags"][::std::mem::offset_of!(tcp_md5sig, tcpm_flags) - 128usize];
    ["Offset of field: tcp_md5sig::tcpm_prefixlen"][::std::mem::offset_of!(tcp_md5sig, tcpm_prefixlen) - 129usize];
    ["Offset of field: tcp_md5sig::tcpm_keylen"][::std::mem::offset_of!(tcp_md5sig, tcpm_keylen) - 130usize];
    ["Offset of field: tcp_md5sig::tcpm_ifindex"][::std::mem::offset_of!(tcp_md5sig, tcpm_ifindex) - 132usize];
    ["Offset of field: tcp_md5sig::tcpm_key"][::std::mem::offset_of!(tcp_md5sig, tcpm_key) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_diag_md5sig {
    pub tcpm_family: __u8,
    pub tcpm_prefixlen: __u8,
    pub tcpm_keylen: __u16,
    pub tcpm_addr: [__be32; 4usize],
    pub tcpm_key: [__u8; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_diag_md5sig"][::std::mem::size_of::<tcp_diag_md5sig>() - 100usize];
    ["Alignment of tcp_diag_md5sig"][::std::mem::align_of::<tcp_diag_md5sig>() - 4usize];
    ["Offset of field: tcp_diag_md5sig::tcpm_family"][::std::mem::offset_of!(tcp_diag_md5sig, tcpm_family) - 0usize];
    ["Offset of field: tcp_diag_md5sig::tcpm_prefixlen"]
        [::std::mem::offset_of!(tcp_diag_md5sig, tcpm_prefixlen) - 1usize];
    ["Offset of field: tcp_diag_md5sig::tcpm_keylen"][::std::mem::offset_of!(tcp_diag_md5sig, tcpm_keylen) - 2usize];
    ["Offset of field: tcp_diag_md5sig::tcpm_addr"][::std::mem::offset_of!(tcp_diag_md5sig, tcpm_addr) - 4usize];
    ["Offset of field: tcp_diag_md5sig::tcpm_key"][::std::mem::offset_of!(tcp_diag_md5sig, tcpm_key) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_ao_add {
    pub addr: __kernel_sockaddr_storage,
    pub alg_name: [::std::os::raw::c_char; 64usize],
    pub ifindex: __s32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub reserved2: __u16,
    pub prefix: __u8,
    pub sndid: __u8,
    pub rcvid: __u8,
    pub maclen: __u8,
    pub keyflags: __u8,
    pub keylen: __u8,
    pub key: [__u8; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_ao_add"][::std::mem::size_of::<tcp_ao_add>() - 288usize];
    ["Alignment of tcp_ao_add"][::std::mem::align_of::<tcp_ao_add>() - 8usize];
    ["Offset of field: tcp_ao_add::addr"][::std::mem::offset_of!(tcp_ao_add, addr) - 0usize];
    ["Offset of field: tcp_ao_add::alg_name"][::std::mem::offset_of!(tcp_ao_add, alg_name) - 128usize];
    ["Offset of field: tcp_ao_add::ifindex"][::std::mem::offset_of!(tcp_ao_add, ifindex) - 192usize];
    ["Offset of field: tcp_ao_add::reserved2"][::std::mem::offset_of!(tcp_ao_add, reserved2) - 200usize];
    ["Offset of field: tcp_ao_add::prefix"][::std::mem::offset_of!(tcp_ao_add, prefix) - 202usize];
    ["Offset of field: tcp_ao_add::sndid"][::std::mem::offset_of!(tcp_ao_add, sndid) - 203usize];
    ["Offset of field: tcp_ao_add::rcvid"][::std::mem::offset_of!(tcp_ao_add, rcvid) - 204usize];
    ["Offset of field: tcp_ao_add::maclen"][::std::mem::offset_of!(tcp_ao_add, maclen) - 205usize];
    ["Offset of field: tcp_ao_add::keyflags"][::std::mem::offset_of!(tcp_ao_add, keyflags) - 206usize];
    ["Offset of field: tcp_ao_add::keylen"][::std::mem::offset_of!(tcp_ao_add, keylen) - 207usize];
    ["Offset of field: tcp_ao_add::key"][::std::mem::offset_of!(tcp_ao_add, key) - 208usize];
};
impl tcp_ao_add {
    #[inline]
    pub fn set_current(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_set_current(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn set_current_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_set_current_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn set_rnext(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_set_rnext(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn set_rnext_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_set_rnext_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        set_current: __u32,
        set_rnext: __u32,
        reserved: __u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let set_current: u32 = unsafe { ::std::mem::transmute(set_current) };
            set_current as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let set_rnext: u32 = unsafe { ::std::mem::transmute(set_rnext) };
            set_rnext as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_ao_del {
    pub addr: __kernel_sockaddr_storage,
    pub ifindex: __s32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub reserved2: __u16,
    pub prefix: __u8,
    pub sndid: __u8,
    pub rcvid: __u8,
    pub current_key: __u8,
    pub rnext: __u8,
    pub keyflags: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_ao_del"][::std::mem::size_of::<tcp_ao_del>() - 144usize];
    ["Alignment of tcp_ao_del"][::std::mem::align_of::<tcp_ao_del>() - 8usize];
    ["Offset of field: tcp_ao_del::addr"][::std::mem::offset_of!(tcp_ao_del, addr) - 0usize];
    ["Offset of field: tcp_ao_del::ifindex"][::std::mem::offset_of!(tcp_ao_del, ifindex) - 128usize];
    ["Offset of field: tcp_ao_del::reserved2"][::std::mem::offset_of!(tcp_ao_del, reserved2) - 136usize];
    ["Offset of field: tcp_ao_del::prefix"][::std::mem::offset_of!(tcp_ao_del, prefix) - 138usize];
    ["Offset of field: tcp_ao_del::sndid"][::std::mem::offset_of!(tcp_ao_del, sndid) - 139usize];
    ["Offset of field: tcp_ao_del::rcvid"][::std::mem::offset_of!(tcp_ao_del, rcvid) - 140usize];
    ["Offset of field: tcp_ao_del::current_key"][::std::mem::offset_of!(tcp_ao_del, current_key) - 141usize];
    ["Offset of field: tcp_ao_del::rnext"][::std::mem::offset_of!(tcp_ao_del, rnext) - 142usize];
    ["Offset of field: tcp_ao_del::keyflags"][::std::mem::offset_of!(tcp_ao_del, keyflags) - 143usize];
};
impl tcp_ao_del {
    #[inline]
    pub fn set_current(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_set_current(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn set_current_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_set_current_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn set_rnext(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_set_rnext(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn set_rnext_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_set_rnext_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn del_async(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_del_async(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn del_async_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_del_async_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                29u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                29u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        set_current: __u32,
        set_rnext: __u32,
        del_async: __u32,
        reserved: __u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let set_current: u32 = unsafe { ::std::mem::transmute(set_current) };
            set_current as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let set_rnext: u32 = unsafe { ::std::mem::transmute(set_rnext) };
            set_rnext as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let del_async: u32 = unsafe { ::std::mem::transmute(del_async) };
            del_async as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_ao_info_opt {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub reserved2: __u16,
    pub current_key: __u8,
    pub rnext: __u8,
    pub pkt_good: __u64,
    pub pkt_bad: __u64,
    pub pkt_key_not_found: __u64,
    pub pkt_ao_required: __u64,
    pub pkt_dropped_icmp: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_ao_info_opt"][::std::mem::size_of::<tcp_ao_info_opt>() - 48usize];
    ["Alignment of tcp_ao_info_opt"][::std::mem::align_of::<tcp_ao_info_opt>() - 8usize];
    ["Offset of field: tcp_ao_info_opt::reserved2"][::std::mem::offset_of!(tcp_ao_info_opt, reserved2) - 4usize];
    ["Offset of field: tcp_ao_info_opt::current_key"][::std::mem::offset_of!(tcp_ao_info_opt, current_key) - 6usize];
    ["Offset of field: tcp_ao_info_opt::rnext"][::std::mem::offset_of!(tcp_ao_info_opt, rnext) - 7usize];
    ["Offset of field: tcp_ao_info_opt::pkt_good"][::std::mem::offset_of!(tcp_ao_info_opt, pkt_good) - 8usize];
    ["Offset of field: tcp_ao_info_opt::pkt_bad"][::std::mem::offset_of!(tcp_ao_info_opt, pkt_bad) - 16usize];
    ["Offset of field: tcp_ao_info_opt::pkt_key_not_found"]
        [::std::mem::offset_of!(tcp_ao_info_opt, pkt_key_not_found) - 24usize];
    ["Offset of field: tcp_ao_info_opt::pkt_ao_required"]
        [::std::mem::offset_of!(tcp_ao_info_opt, pkt_ao_required) - 32usize];
    ["Offset of field: tcp_ao_info_opt::pkt_dropped_icmp"]
        [::std::mem::offset_of!(tcp_ao_info_opt, pkt_dropped_icmp) - 40usize];
};
impl tcp_ao_info_opt {
    #[inline]
    pub fn set_current(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_set_current(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn set_current_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_set_current_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn set_rnext(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_set_rnext(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn set_rnext_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_set_rnext_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ao_required(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ao_required(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ao_required_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ao_required_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn set_counters(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_set_counters(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn set_counters_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_set_counters_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn accept_icmps(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_accept_icmps(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn accept_icmps_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_accept_icmps_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> __u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                27u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                27u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        set_current: __u32,
        set_rnext: __u32,
        ao_required: __u32,
        set_counters: __u32,
        accept_icmps: __u32,
        reserved: __u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let set_current: u32 = unsafe { ::std::mem::transmute(set_current) };
            set_current as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let set_rnext: u32 = unsafe { ::std::mem::transmute(set_rnext) };
            set_rnext as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ao_required: u32 = unsafe { ::std::mem::transmute(ao_required) };
            ao_required as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let set_counters: u32 = unsafe { ::std::mem::transmute(set_counters) };
            set_counters as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let accept_icmps: u32 = unsafe { ::std::mem::transmute(accept_icmps) };
            accept_icmps as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_ao_getsockopt {
    pub addr: __kernel_sockaddr_storage,
    pub alg_name: [::std::os::raw::c_char; 64usize],
    pub key: [__u8; 80usize],
    pub nkeys: __u32,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub sndid: __u8,
    pub rcvid: __u8,
    pub prefix: __u8,
    pub maclen: __u8,
    pub keyflags: __u8,
    pub keylen: __u8,
    pub ifindex: __s32,
    pub pkt_good: __u64,
    pub pkt_bad: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_ao_getsockopt"][::std::mem::size_of::<tcp_ao_getsockopt>() - 304usize];
    ["Alignment of tcp_ao_getsockopt"][::std::mem::align_of::<tcp_ao_getsockopt>() - 8usize];
    ["Offset of field: tcp_ao_getsockopt::addr"][::std::mem::offset_of!(tcp_ao_getsockopt, addr) - 0usize];
    ["Offset of field: tcp_ao_getsockopt::alg_name"][::std::mem::offset_of!(tcp_ao_getsockopt, alg_name) - 128usize];
    ["Offset of field: tcp_ao_getsockopt::key"][::std::mem::offset_of!(tcp_ao_getsockopt, key) - 192usize];
    ["Offset of field: tcp_ao_getsockopt::nkeys"][::std::mem::offset_of!(tcp_ao_getsockopt, nkeys) - 272usize];
    ["Offset of field: tcp_ao_getsockopt::sndid"][::std::mem::offset_of!(tcp_ao_getsockopt, sndid) - 278usize];
    ["Offset of field: tcp_ao_getsockopt::rcvid"][::std::mem::offset_of!(tcp_ao_getsockopt, rcvid) - 279usize];
    ["Offset of field: tcp_ao_getsockopt::prefix"][::std::mem::offset_of!(tcp_ao_getsockopt, prefix) - 280usize];
    ["Offset of field: tcp_ao_getsockopt::maclen"][::std::mem::offset_of!(tcp_ao_getsockopt, maclen) - 281usize];
    ["Offset of field: tcp_ao_getsockopt::keyflags"][::std::mem::offset_of!(tcp_ao_getsockopt, keyflags) - 282usize];
    ["Offset of field: tcp_ao_getsockopt::keylen"][::std::mem::offset_of!(tcp_ao_getsockopt, keylen) - 283usize];
    ["Offset of field: tcp_ao_getsockopt::ifindex"][::std::mem::offset_of!(tcp_ao_getsockopt, ifindex) - 284usize];
    ["Offset of field: tcp_ao_getsockopt::pkt_good"][::std::mem::offset_of!(tcp_ao_getsockopt, pkt_good) - 288usize];
    ["Offset of field: tcp_ao_getsockopt::pkt_bad"][::std::mem::offset_of!(tcp_ao_getsockopt, pkt_bad) - 296usize];
};
impl tcp_ao_getsockopt {
    #[inline]
    pub fn is_current(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_current(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_current_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_is_current_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_rnext(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_rnext(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_rnext_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_is_rnext_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn get_all(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_get_all(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn get_all_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_get_all_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> __u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 13u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> __u16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                13u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: __u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                13u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_current: __u16,
        is_rnext: __u16,
        get_all: __u16,
        reserved: __u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_current: u16 = unsafe { ::std::mem::transmute(is_current) };
            is_current as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_rnext: u16 = unsafe { ::std::mem::transmute(is_rnext) };
            is_rnext as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let get_all: u16 = unsafe { ::std::mem::transmute(get_all) };
            get_all as u64
        });
        __bindgen_bitfield_unit.set(3usize, 13u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct tcp_ao_repair {
    pub snt_isn: __be32,
    pub rcv_isn: __be32,
    pub snd_sne: __u32,
    pub rcv_sne: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_ao_repair"][::std::mem::size_of::<tcp_ao_repair>() - 16usize];
    ["Alignment of tcp_ao_repair"][::std::mem::align_of::<tcp_ao_repair>() - 8usize];
    ["Offset of field: tcp_ao_repair::snt_isn"][::std::mem::offset_of!(tcp_ao_repair, snt_isn) - 0usize];
    ["Offset of field: tcp_ao_repair::rcv_isn"][::std::mem::offset_of!(tcp_ao_repair, rcv_isn) - 4usize];
    ["Offset of field: tcp_ao_repair::snd_sne"][::std::mem::offset_of!(tcp_ao_repair, snd_sne) - 8usize];
    ["Offset of field: tcp_ao_repair::rcv_sne"][::std::mem::offset_of!(tcp_ao_repair, rcv_sne) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_zerocopy_receive {
    pub address: __u64,
    pub length: __u32,
    pub recv_skip_hint: __u32,
    pub inq: __u32,
    pub err: __s32,
    pub copybuf_address: __u64,
    pub copybuf_len: __s32,
    pub flags: __u32,
    pub msg_control: __u64,
    pub msg_controllen: __u64,
    pub msg_flags: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_zerocopy_receive"][::std::mem::size_of::<tcp_zerocopy_receive>() - 64usize];
    ["Alignment of tcp_zerocopy_receive"][::std::mem::align_of::<tcp_zerocopy_receive>() - 8usize];
    ["Offset of field: tcp_zerocopy_receive::address"][::std::mem::offset_of!(tcp_zerocopy_receive, address) - 0usize];
    ["Offset of field: tcp_zerocopy_receive::length"][::std::mem::offset_of!(tcp_zerocopy_receive, length) - 8usize];
    ["Offset of field: tcp_zerocopy_receive::recv_skip_hint"]
        [::std::mem::offset_of!(tcp_zerocopy_receive, recv_skip_hint) - 12usize];
    ["Offset of field: tcp_zerocopy_receive::inq"][::std::mem::offset_of!(tcp_zerocopy_receive, inq) - 16usize];
    ["Offset of field: tcp_zerocopy_receive::err"][::std::mem::offset_of!(tcp_zerocopy_receive, err) - 20usize];
    ["Offset of field: tcp_zerocopy_receive::copybuf_address"]
        [::std::mem::offset_of!(tcp_zerocopy_receive, copybuf_address) - 24usize];
    ["Offset of field: tcp_zerocopy_receive::copybuf_len"]
        [::std::mem::offset_of!(tcp_zerocopy_receive, copybuf_len) - 32usize];
    ["Offset of field: tcp_zerocopy_receive::flags"][::std::mem::offset_of!(tcp_zerocopy_receive, flags) - 36usize];
    ["Offset of field: tcp_zerocopy_receive::msg_control"]
        [::std::mem::offset_of!(tcp_zerocopy_receive, msg_control) - 40usize];
    ["Offset of field: tcp_zerocopy_receive::msg_controllen"]
        [::std::mem::offset_of!(tcp_zerocopy_receive, msg_controllen) - 48usize];
    ["Offset of field: tcp_zerocopy_receive::msg_flags"]
        [::std::mem::offset_of!(tcp_zerocopy_receive, msg_flags) - 56usize];
    ["Offset of field: tcp_zerocopy_receive::reserved"]
        [::std::mem::offset_of!(tcp_zerocopy_receive, reserved) - 60usize];
};
